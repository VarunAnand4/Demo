import java.text.SimpleDateFormat;
import java.util.Calendar;

public class AccountHolder{
    public static double annualInterestRate = 0.04;
    private double balance;
    public AccountHolder(double initialBalance){
        if (initialBalance<0){
            throw new IllegalArgumentException("Initial balance must be non-negative.");
        }
        this.balance=initialBalance;
    }
    public void deposit(double amount){
        if (amount>0){
            this.balance+=amount;
        }else{
            System.out.println("Deposit amount must be positive.");
        }
    }
    public void withdrawal(double amount){
        if (amount>0) {
            if(this.balance-amount>=50){
                this.balance-=amount;
            } else {
                System.out.println("Withdrawal would reduce balance below $50. Operation cancelled.");
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
        }
    }
    public void monthlyInterest() {
        this.balance += this.balance * (annualInterestRate / 12.0);
    }
    public double getBalance() {
        return this.balance;
    }
}
****************************************************************************************************************************************************
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

public class AccountHolderTest {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        AccountHolder.annualInterestRate = 0.04;
        System.out.printf("Enter the initial balance for the account\n");
        double initialBalance=s.nextDouble();
        while(initialBalance<0){
            System.out.println("Balance cannot be negative. Please enter a valid initial balance");
            initialBalance=s.nextDouble();
        }

        AccountHolder account=new AccountHolder(initialBalance);
        System.out.println("Enter the deposit amount");
        double depositAmount=s.nextDouble();
        account.deposit(depositAmount);
        System.out.println("Enter the withdrawal amount");
        double withdrawalAmount=s.nextDouble();
        account.withdrawal(withdrawalAmount);
        account.monthlyInterest();

        System.out.printf("Ending balance, including interest: $%.2f%n", account.getBalance());
        
        System.out.println("Monthly balances for one year at .04");
        System.out.println("Balances: ");
        System.out.println("Account Balance w. Interest");
        System.out.printf("Base     \t$%.2f%n",account.getBalance());

        double balance=account.getBalance();
        for (int month=1;month<=12;month++){
            balance+=balance*(AccountHolder.annualInterestRate/12.0);
            System.out.printf("Month %d:\t$%.2f%n",month,balance);
        }
        displayProgramDetails();
        s.close();
    }
    private static void displayProgramDetails() {
        String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());
        System.out.println("Cur dt=" + timeStamp);
        System.out.println("Programmed by Sridevi CJ Student");
    }
}
